import { Request, Response } from 'express';
import ip from 'ip';
import { BadRequestError } from 'middleware/error-middleware';
import { AuthService } from 'shared/services/db/auth.service';
import { IAuthDocument } from '../interfaces/auth.interface';
import crypto from 'crypto';
import { forgotPasswordTemplate } from 'shared/services/emails/templates/forgot-password/forgot-password-template';
import { emailQueue } from 'shared/services/queues/email.queue';
import HTTP_STATUS from 'http-status-codes';
import { IResetPasswordTemplate } from 'shared/services/emails/templates/reset-password/reset-password-confirmation-template.interface';
import moment from 'moment';
import { resetPasswordTemplate } from 'shared/services/emails/templates/reset-password/reset-password-confirmation-template';

/**
 * Method used to send an email template with a password reset link
 * The reset link contains the reset token valid for one hour only
 * Current auth token and token expiration date are saved in the auth model
 */
export const generateResetPasswordLink = async (req: Request, res: Response): Promise<void> => {
  const { email } = req.body;

  const existingUser: IAuthDocument = await AuthService.getUserByEmail(email);
  if (!existingUser) {
    BadRequestError('Invalid credentials');
  }
  /* Generate a string which represents the token */
  const randomBytes: Buffer = await Promise.resolve(crypto.randomBytes(20));
  const randomCharacters: string = randomBytes.toString('hex');
  /*  Date.now()*60*60*1000  => token is valid for 1 hour */
  await AuthService.updatePasswordToken(existingUser.userId, randomCharacters, Date.now() * 60 * 60 * 10);

  const resetLink = `${process.env.CLIENT_URL}/reset-password?token=${randomCharacters}`;
  const htmlTemplate: string = forgotPasswordTemplate({ receiverUsername: existingUser.username, resetLink });
  emailQueue().addEmailJob('forgotUserPassword', { template: htmlTemplate, receiverEmail: email, subject: 'Reset your password!' });
  res.status(HTTP_STATUS.OK).json({ message: 'Password reset email send. Please verify your email! ðŸ’Œ' });
};

/**
 * Check for the user based on the password reset token generated by the 'generateResetPasswordLink'
 * if the token is expired, response from mongoDB for fetching actual user will be null
 * The new password is updated in MongoDB and a successful confirmation mail is sent to user
 */
export const updatePassword = async (req: Request, res: Response): Promise<void> => {
  const { password, confirmPassword } = req.body;
  const { token } = req.params; /**bacause the endpoint will be : /reset-password?token=... */
  if (password !== confirmPassword) {
    BadRequestError('Passwords do not match!');
  }

  const existingUser: IAuthDocument | null = await AuthService.getUserByPasswordToken(token as string);

  if (!existingUser) {
    BadRequestError('Reset token has expired!');
  }
  if (existingUser) {
    existingUser.password = password;
    existingUser.passwordResetExpires = undefined;
    existingUser.passwordResetToken = undefined;
    /* Update the user info in MongoDb */
    await existingUser?.save();

    const confirmationPasswordResetTemplate: IResetPasswordTemplate = {
      username: existingUser?.username,
      email: existingUser?.email,
      ipAddress: ip.address(),
      date: moment().format('DD/MM/YYY HH:mm')
    };
    emailQueue().addEmailJob('forgotUserPassword', {
      template: resetPasswordTemplate(confirmationPasswordResetTemplate),
      receiverEmail: existingUser?.email,
      subject: 'Password reset confirmation'
    });

    res.status(HTTP_STATUS.OK).json({ message: 'Password successfully updated!' });
  }
};
